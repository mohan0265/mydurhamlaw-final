
'use client';

import React, { useState, useEffect } from 'react';
import { useFeatureFlag } from '@/lib/flags';
import { telemetry } from '@/lib/telemetry';
import { resilientFetch } from '@/lib/resilient-fetch';
import { 
  FileText, 
  Save, 
  Download, 
  AlertTriangle,
  ChevronRight,
  ChevronLeft,
  CheckCircle,
  Edit3,
  Eye
} from 'lucide-react';
import toast from 'react-hot-toast';

interface Assignment {
  id?: string;
  title: string;
  module?: string;
  integrity_level: string;
  status: string;
  issue: string;
  research: string;
  analysis: string;
  draft: string;
  due_date?: string;
}

interface Props {
  assignmentId?: string;
  initialData?: Partial<Assignment>;
  onSave?: (assignment: Assignment) => void;
}

const STEPS = ['Issue', 'Research', 'Analysis', 'Conclusion'];
const INTEGRITY_LEVELS = [
  { value: 'study_aid', label: 'Study Aid', description: 'Learning and understanding concepts' },
  { value: 'research', label: 'Research', description: 'Gathering information and sources' },
  { value: 'draft', label: 'Draft', description: 'Initial structuring and organizing ideas' },
  { value: 'final', label: 'Final', description: 'Completed work for submission' },
];

export default function IRACWizard({ assignmentId, initialData, onSave }: Props) {
  const isEnabled = useFeatureFlag('ff_assignment_oscola');
  const [currentStep, setCurrentStep] = useState(0);
  const [assignment, setAssignment] = useState<Assignment>({
    title: '',
    module: '',
    integrity_level: 'study_aid',
    status: 'draft',
    issue: '',
    research: '',
    analysis: '',
    draft: '',
    ...initialData,
  });
  
  const [isSaving, setIsSaving] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showIntegrityDialog, setShowIntegrityDialog] = useState(false);
  const [wordCounts, setWordCounts] = useState({
    issue: 0,
    research: 0,
    analysis: 0,
    draft: 0,
  });

  useEffect(() => {
    if (initialData) {
      setAssignment(prev => ({ ...prev, ...initialData }));
    }
  }, [initialData]);

  useEffect(() => {
    // Update word counts
    setWordCounts({
      issue: countWords(assignment.issue),
      research: countWords(assignment.research),
      analysis: countWords(assignment.analysis),
      draft: countWords(assignment.draft),
    });
  }, [assignment.issue, assignment.research, assignment.analysis, assignment.draft]);

  const countWords = (text: string) => {
    return text.trim().split(/\s+/).filter(word => word.length > 0).length;
  };

  const handleFieldChange = (field: keyof Assignment, value: string) => {
    setAssignment(prev => ({ ...prev, [field]: value }));
    setHasUnsavedChanges(true);
  };

  const saveAssignment = async () => {
    if (!assignment.title.trim()) {
      toast.error('Please enter a title for your assignment');
      return;
    }

    try {
      setIsSaving(true);
      
      const endpoint = assignmentId ? 
        `/api/assignments/${assignmentId}` : 
        '/api/assignments';
      
      const method = assignmentId ? 'PUT' : 'POST';

      const assignmentData = {
        ...assignment,
        word_count: wordCounts.issue + wordCounts.research + wordCounts.analysis + wordCounts.draft,
      };

      const response = await resilientFetch(endpoint, {
        method,
        headers: {
          'Content-Type': 'application/json',
          'x-user-id': 'current-user', // TODO: Get from auth context
        },
        body: JSON.stringify(assignmentData),
        endpoint: 'assignments',
      });

      const result = await response.json();
      
      if (result.success) {
        setHasUnsavedChanges(false);
        toast.success(assignmentId ? 'Assignment updated!' : 'Assignment created!');
        
        telemetry.assignmentCreated(assignment.module, 'IRAC');
        onSave?.(result.assignment);
      } else {
        throw new Error(result.error || 'Failed to save assignment');
      }
    } catch (error) {
      console.error('Save assignment error:', error);
      toast.error('Failed to save assignment');
    } finally {
      setIsSaving(false);
    }
  };

  const exportAssignment = () => {
    const content = `
# ${assignment.title}
${assignment.module ? `**Module:** ${assignment.module}` : ''}
${assignment.due_date ? `**Due Date:** ${new Date(assignment.due_date).toLocaleDateString()}` : ''}

## Issue
${assignment.issue}

## Research
${assignment.research}

## Analysis
${assignment.analysis}

## Conclusion
${assignment.draft}

---
**Word Count:** ${wordCounts.issue + wordCounts.research + wordCounts.analysis + wordCounts.draft} words
**Integrity Level:** ${INTEGRITY_LEVELS.find(level => level.value === assignment.integrity_level)?.label}
**Generated by MyDurhamLaw IRAC Wizard**
`.trim();

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${assignment.title.replace(/[^a-zA-Z0-9]/g, '_')}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast.success('Assignment exported!');
  };

  const nextStep = () => {
    if (currentStep < STEPS.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const getStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Legal Issue <span className="text-red-500">*</span>
              </label>
              <textarea
                value={assignment.issue}
                onChange={(e) => handleFieldChange('issue', e.target.value)}
                placeholder="What is the key legal question or problem that needs to be resolved? Be specific and concise."
                rows={8}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <div className="mt-1 text-xs text-gray-500">
                Words: {wordCounts.issue}
              </div>
            </div>
            <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
              <div className="text-sm text-blue-800">
                <strong>Tip:</strong> Frame the issue as a question. For example: 
                "Did X owe a duty of care to Y under the principle established in Donoghue v Stevenson?"
              </div>
            </div>
          </div>
        );

      case 1:
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Research & Rule <span className="text-red-500">*</span>
              </label>
              <textarea
                value={assignment.research}
                onChange={(e) => handleFieldChange('research', e.target.value)}
                placeholder="What are the relevant legal principles, statutes, and case law that apply to this issue?"
                rows={10}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <div className="mt-1 text-xs text-gray-500">
                Words: {wordCounts.research}
              </div>
            </div>
            <div className="p-3 bg-green-50 rounded-lg border border-green-200">
              <div className="text-sm text-green-800">
                <strong>Remember:</strong> Include relevant statutes, case law, and legal principles. 
                Ensure you cite sources properly using OSCOLA format.
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Analysis & Application <span className="text-red-500">*</span>
              </label>
              <textarea
                value={assignment.analysis}
                onChange={(e) => handleFieldChange('analysis', e.target.value)}
                placeholder="Apply the legal rules to the facts of your case. Analyze both sides of the argument."
                rows={12}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <div className="mt-1 text-xs text-gray-500">
                Words: {wordCounts.analysis}
              </div>
            </div>
            <div className="p-3 bg-purple-50 rounded-lg border border-purple-200">
              <div className="text-sm text-purple-800">
                <strong>Analysis Tips:</strong> Consider counterarguments, distinguish cases, 
                and explain why certain rules apply or don't apply to your facts.
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Conclusion <span className="text-red-500">*</span>
              </label>
              <textarea
                value={assignment.draft}
                onChange={(e) => handleFieldChange('draft', e.target.value)}
                placeholder="What is your conclusion based on your analysis? Summarize your reasoning."
                rows={6}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <div className="mt-1 text-xs text-gray-500">
                Words: {wordCounts.draft}
              </div>
            </div>
            <div className="p-3 bg-amber-50 rounded-lg border border-amber-200">
              <div className="text-sm text-amber-800">
                <strong>Conclusion:</strong> Directly answer the issue you identified. 
                Be definitive but acknowledge limitations or uncertainties where appropriate.
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  if (!isEnabled) {
    return (
      <div className="bg-gray-50 rounded-lg p-6 text-center">
        <FileText className="h-8 w-8 mx-auto mb-2 text-gray-400" />
        <div className="text-gray-600">IRAC Wizard is not available</div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md border border-gray-200">
      {/* Header */}
      <div className="p-6 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <FileText className="h-6 w-6 text-blue-600" />
            <div>
              <h2 className="text-xl font-semibold text-gray-900">IRAC Wizard</h2>
              <p className="text-sm text-gray-600">Structure your legal analysis</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowIntegrityDialog(true)}
              className="flex items-center space-x-1 px-3 py-1 text-sm bg-amber-100 text-amber-800 rounded-full hover:bg-amber-200"
            >
              <AlertTriangle className="h-3 w-3" />
              <span>Academic Integrity</span>
            </button>
            <div className="text-sm text-gray-500">
              Total: {wordCounts.issue + wordCounts.research + wordCounts.analysis + wordCounts.draft} words
            </div>
          </div>
        </div>

        {/* Assignment Metadata */}
        <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Assignment Title <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={assignment.title}
              onChange={(e) => handleFieldChange('title', e.target.value)}
              placeholder="Enter assignment title"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Module
            </label>
            <input
              type="text"
              value={assignment.module || ''}
              onChange={(e) => handleFieldChange('module', e.target.value)}
              placeholder="e.g., Contract Law"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Due Date
            </label>
            <input
              type="date"
              value={assignment.due_date || ''}
              onChange={(e) => handleFieldChange('due_date', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>

      {/* Step Navigation */}
      <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            {STEPS.map((step, index) => (
              <button
                key={step}
                onClick={() => setCurrentStep(index)}
                className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                  currentStep === index
                    ? 'bg-blue-600 text-white'
                    : currentStep > index
                    ? 'bg-green-100 text-green-800'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {currentStep > index ? (
                  <CheckCircle className="h-4 w-4" />
                ) : (
                  <span className="w-4 h-4 text-center text-xs leading-4">
                    {index + 1}
                  </span>
                )}
                <span>{step}</span>
              </button>
            ))}
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={prevStep}
              disabled={currentStep === 0}
              className="flex items-center space-x-1 px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronLeft className="h-4 w-4" />
              <span>Previous</span>
            </button>
            <button
              onClick={nextStep}
              disabled={currentStep === STEPS.length - 1}
              className="flex items-center space-x-1 px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span>Next</span>
              <ChevronRight className="h-4 w-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Step Content */}
      <div className="p-6">
        <div className="mb-4">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            {STEPS[currentStep]}
          </h3>
        </div>
        
        {getStepContent()}
      </div>

      {/* Actions */}
      <div className="px-6 py-4 border-t border-gray-200 bg-gray-50 rounded-b-lg">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <select
              value={assignment.integrity_level}
              onChange={(e) => handleFieldChange('integrity_level', e.target.value)}
              className="text-sm border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {INTEGRITY_LEVELS.map(level => (
                <option key={level.value} value={level.value}>
                  {level.label}
                </option>
              ))}
            </select>
          </div>

          <div className="flex items-center space-x-3">
            <button
              onClick={exportAssignment}
              disabled={!assignment.title.trim()}
              className="flex items-center space-x-2 px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Download className="h-4 w-4" />
              <span>Export</span>
            </button>
            
            <button
              onClick={saveAssignment}
              disabled={isSaving || !assignment.title.trim()}
              className="flex items-center space-x-2 px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSaving ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                <Save className="h-4 w-4" />
              )}
              <span>{isSaving ? 'Saving...' : 'Save'}</span>
            </button>
          </div>
        </div>

        {hasUnsavedChanges && (
          <div className="mt-2 text-sm text-amber-600">
            You have unsaved changes
          </div>
        )}
      </div>

      {/* Academic Integrity Dialog */}
      {showIntegrityDialog && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <div className="flex items-center space-x-2 mb-4">
              <AlertTriangle className="h-5 w-5 text-amber-600" />
              <h3 className="text-lg font-semibold text-gray-900">Academic Integrity Guidelines</h3>
            </div>
            
            <div className="space-y-3 text-sm text-gray-700">
              <p>
                This IRAC Wizard is designed to help you <strong>structure</strong> and <strong>organize</strong> your legal analysis, not to replace your own thinking and writing.
              </p>
              
              <ul className="list-disc list-inside space-y-1">
                <li>Use this tool to organize your thoughts and ensure proper IRAC structure</li>
                <li>All content must be your own work and understanding</li>
                <li>Always cite sources properly using OSCOLA format</li>
                <li>Declare any AI assistance as required by your institution</li>
                <li>Review your institution's academic integrity policies</li>
              </ul>
              
              <p>
                Current integrity level: <strong>{INTEGRITY_LEVELS.find(l => l.value === assignment.integrity_level)?.label}</strong>
              </p>
            </div>
            
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => setShowIntegrityDialog(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                I Understand
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
